---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Setup the utility location(s)
  hosts: utility_all
  user: root
  gather_facts: "{{ osa_gather_facts | default(True) }}"
  environment: "{{ deployment_environment_variables | default({}) }}"
  vars_files:
    - "defaults/{{ install_method }}_install.yml"
  tags:
    - utility
  pre_tasks:
    - include: "common-tasks/os-{{ container_tech | default('lxc') }}-container-setup.yml"
      static: no
      when: not is_metal

    - include: common-tasks/os-log-dir-setup.yml
      vars:
        log_dirs:
          - src: "/openstack/log/{{ inventory_hostname }}-utility"
            dest: "/var/log/utility"

    - include: common-tasks/unbound-clients.yml
      static: no
      when:
        - hostvars['localhost']['resolvconf_enabled'] | bool

    - name: Create log directory (not is_metal)
      file:
        dest: "/var/log/utility"
        state: "directory"
        force: "yes"
      when: not is_metal | bool

  roles:
    - role: "galera_client"
    - role: "openstack_openrc"
      tags:
        - openrc

  post_tasks:
    - name: Add OpenStack client to distro packages
      set_fact:
        utility_distro_packages: "{{ (utility_distro_packages | default([])) + utility_distro_openstack_clients_packages }}"
      when: install_method == "distro"

    - name: Install distro packages
      package:
        name: "{{ utility_distro_packages | default([]) }}"
        state: "{{ utility_package_state }}"
        update_cache: "{{ (ansible_pkg_mgr in ['apt', 'zypper']) | ternary('yes', omit) }}"
        cache_valid_time: "{{ (ansible_pkg_mgr == 'apt') | ternary(cache_timeout, omit) }}"
      register: install_packages
      until: install_packages is success
      retries: 5
      delay: 2

    - name: Distribute private ssh key
      copy:
        content: "{{ utility_ssh_private_key }}"
        dest: /root/.ssh/id_rsa
        mode: 0600
        owner: root
        group: root
      when: utility_ssh_private_key is defined

    - name: Install openstack clients (source-based install)
      when:
        - install_method == "source"
      block:
        - name: Get list of repo packages
          uri:
            url: "{{ repo_release_path }}/requirements_absolute_requirements.txt"
            return_content: yes
          register: _abs_reqs
          run_once: true
          tags:
            - always

        - name: Derive the list of openstack clients
          set_fact:
            _openstack_client_list: >-
              {%- set package_list = [] %}
              {%- for l in _abs_reqs.content.split('\n') %}
              {%-   if (l is match('^python_.*client==.*$')) or (l is match('^(aodh|gnocchi)client==.*$')) %}
              {%-     set _ = package_list.append(l | regex_replace('==.*$', '')) %}
              {%-   endif %}
              {%- endfor %}
              {{- package_list }}
          run_once: true
          tags:
            - always

        - name: Create the virtualenv (if it does not exist)
          command: "virtualenv --never-download --no-site-packages {{ utility_venv_bin | dirname }}"
          args:
            creates: "{{ utility_venv_bin }}/activate"

        - name: Upgrade pip/setuptools/wheel to the versions we want
          pip:
            name:
              - pip
              - setuptools
              - wheel
            state: "{{ utility_pip_package_state }}"
            virtualenv: "{{ utility_venv_bin | dirname }}"
            virtualenv_site_packages: "no"
            extra_args: >-
              {{ (pip_install_upper_constraints is defined) | ternary('--constraint ' + pip_install_upper_constraints | default(''),'') }}
              {{ pip_install_options | default('') }}
          register: install_packages
          until: install_packages is success
          retries: 5
          delay: 2

        - name: Install pip packages
          pip:
            name: "{{ _openstack_client_list | union(utility_pip_packages) }}"
            state: "{{ utility_pip_package_state }}"
            virtualenv: "{{ utility_venv_bin | dirname }}"
            virtualenv_site_packages: "no"
            extra_args: >-
              {{ (pip_install_upper_constraints is defined) | ternary('--constraint ' + pip_install_upper_constraints | default(''),'') }}
              {{ pip_install_options | default('') }}
          register: install_packages
          until: install_packages is success
          retries: 5
          delay: 2

        - name: Create symlinks for openstack clients
          shell: |
            {% set _bin_name = item | regex_replace('^(?:python_)?(\w*)(?:client)$', '\\1') %}
            if [[ -e "{{ utility_venv_bin }}/{{ _bin_name }}" ]]; then
              ln -sfn {{ utility_venv_bin }}/{{ _bin_name }} /usr/local/bin/{{ _bin_name }}
            fi
          args:
            executable: /bin/bash
          with_items: "{{ _openstack_client_list }}"

        - name: Create openstack client bash_completion script
          shell: |
             openstack complete > /etc/bash_completion.d/openstack_client
